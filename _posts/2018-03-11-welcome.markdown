---
layout: post
title: Welcome to Two Diverging Roads
img: himalayan.jpg
date: '2018-03-11 11:17:00 +0000'
description: First post - Welcome
tag:
  - Introduction
published: true
---
This blog was created as a programming hobby, which is partly linked to my scientific background.

In this blog, I will try to write about different programming languages, and share some codes on my Github repo.

Before going deeper into programming, it is important to firstly identify which language to use. Read more here: [What language should you learn first](/assets/img/What programming language should you learn first_ â€“ freeCodeCamp.pdf).

However, in general, scientific computing requires specialized tools and functions. A graphical interface may or may not be required, depending on the context and scriptability. You also want a language that can easily take in a few inputs and outputs the results.

From a personal perspective, I first learnt Visual Basic (we are talking about 1995). At that time, I was really impressed with VB because it featured a drag-and-drop interface. You want a check box? Just drag the button onto your user form. The syntax was also easy to follow, so easy that people often neglect VB till today. What was missing back then an easy way to access Windows API. The mathematical functions were not great, again remember that this was in the 'old days'. While it is better in its VB.NET incarnation, it still lacks the simplicity and extendability for scientific computing. Let me know if you figure out how to take a dataset and predictive modeling with it in VB.NET!

I am currently learning Python, R and JavaScript (JS) with a focus on scientific aspects with are different than gaming or general applications. Despite the various arguments raging on Quora or Stackoverflow about which language is the best and so on, bear in mind that programming is approaching the convergence seen in computer hardware. Just like more and more devices became USB-ized into universal charging port (heck, even toothbrushes now have USB ports), I think programming languages will also become so. This is mainly driven by the need for machine learning where programmers are looking for a simple way to integrate modeling by calling functions from 'standard' libraries. You can create neural network in Python, R and JS - easily! So begins the quest for beginners in scientific programming - what language to use? Well, initially, I was tempted into R, then into Python and now into JS - hence the tagline for this blog 'Two Diverging Roads'.

As a scientist, your main focus is to get a dataset, process it quickly and give the result to the user. No one really cares how you do it (pick your language), especially your colleagues who will likely be the end users. Hence, it is very critical to separate the front-end from the back-end. Do not worry to much about the language as it is possible to integrate VB.NET with R (RDotNet library), Python with R and JS with R. Yes, R is the mainstream language for statisticians but it is not the be-all and end-all of scientific computing.

The next questions to ask is how will the user access your program. If your solution requires the users to install this library and that framework (think of .NET), then think again. Do you really want to troubleshoot compatibility issues? I personally think Web is the future, whether deployed publicly or within a secure corporate intranet.

That's all for now, in the next post, we will look at real work programming! If you have comments, feel free to drop me an email.
